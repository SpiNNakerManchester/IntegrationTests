# Copyright (c) 2020 The University of Manchester
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This workflow will install Python dependencies, run tests, lint and rat with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Self Hosted Tests

on:
  push:
  schedule:
    - cron: '0 1 * * *'

jobs:
  integration_tests:
    runs-on: self-hosted
    container:
        image: python3.6:latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Setup Environment
      shell: bash
      run: |
          echo "SPINN_DIRS=${GITHUB_WORKSPACE}/spinnaker_tools" >> $GITHUB_ENV
          echo "NEURAL_MODELLING_DIRS=${GITHUB_WORKSPACE}/sPyNNaker/neural_modelling" >> $GITHUB_ENV
          if [[ "${{ github.event_name }}" == "schedule" ]]
          then
              echo "##[set-output name=n_threads;]1"
          else
              echo "##[set-output name=n_threads;]auto"
          fi
      id: set_env_step
      
    - name: Install Python Dependencies
      run: |
        echo "${{ steps.set_env_step.outputs.n_threads }}"
        pip3 install --upgrade "setuptools < 50.0.0" wheel
        pip install --user --upgrade pip
        pip install --user --only-binary=numpy,scipy,matplotlib numpy scipy matplotlib coverage

    - name: Clone Repositories to be tested
      uses: ./.github/actions/clone_matching
      with: 
        repository: |
          https://github.com/SpiNNakerManchester/SpiNNUtils.git
          https://github.com/SpiNNakerManchester/SpiNNMachine.git
          https://github.com/SpiNNakerManchester/SpiNNMan.git
          https://github.com/SpiNNakerManchester/PACMAN.git
          https://github.com/SpiNNakerManchester/DataSpecification.git
          https://github.com/SpiNNakerManchester/spalloc.git
          https://github.com/SpiNNakerManchester/sPyNNaker8.git
          https://github.com/SpiNNakerManchester/SpiNNakerGraphFrontEnd.git
          https://github.com/SpiNNakerManchester/spinnaker_tools.git
          https://github.com/SpiNNakerManchester/spinn_common.git
          https://github.com/SpiNNakerManchester/SpiNNFrontEndCommon.git
          https://github.com/SpiNNakerManchester/sPyNNaker.git
          https://github.com/SpiNNakerManchester/JavaSpiNNaker.git
          https://github.com/SpiNNakerManchester/IntroLab.git
          https://github.com/SpiNNakerManchester/PyNN8Examples.git
          https://github.com/SpiNNakerManchester/sPyNNaker8NewModelTemplate.git
          git@github.com:SpiNNakerManchester/microcircuit_model.git
    - name: Setup SpiNNUtils
      run: python setup.py develop
      working-directory: SpiNNUtils

    - name: Make C Code
      run: |
        make -C $SPINN_DIRS
        make -C spinn_common install
        make -C SpiNNFrontEndCommon/c_common
        make -C SpiNNFrontEndCommon/c_common install
        make -C sPyNNaker/neural_modelling
        make -C sPyNNaker8NewModelTemplate/c_models
        make -C SpiNNakerGraphFrontEnd/spinnaker_graph_front_end/examples
        make -C SpiNNakerGraphFrontEnd/gfe_integration_tests/
    
    - name: Install Python Modules
      uses: ./.github/actions/python_setup
      with:
        folder: |
          SpiNNMachine
          SpiNNMan
          PACMAN
          DataSpecification
          spalloc
          SpiNNFrontEndCommon
          sPyNNaker
          sPyNNaker8
          sPyNNaker8NewModelTemplate
          SpiNNakerGraphFrontEnd
         
    - name: Install Requirements
      run: |
        pip install -r SpiNNMachine/requirements-test.txt
        pip install -r SpiNNMan/requirements-test.txt
        pip install -r PACMAN/requirements-test.txt
        pip install -r DataSpecification/requirements-test.txt
        pip install -r spalloc/requirements-test.txt
        pip install -r SpiNNFrontEndCommon/requirements-test.txt
        pip install -r sPyNNaker/requirements-test.txt
        pip install -r sPyNNaker8/requirements-test.txt
        pip install -r SpiNNakerGraphFrontEnd/requirements-test.txt
       
    - name: Install Java
      run: mvn -f JavaSpiNNaker -Dmaven.test.skip=true -DskipTests --no-transfer-progress package
      
    - name: Prepare Configuration
      run: |
        # Write a sPyNNaker config file for spalloc and java use
        echo "[Machine]" > ~/.spynnaker.cfg
        echo "spalloc_server = 10.11.192.11" >> ~/.spynnaker.cfg
        echo "spalloc_user = Jenkins" >> ~/.spynnaker.cfg
        echo "enable_advanced_monitor_support = True" >> ~/.spynnaker.cfg
        echo "[Java]" >> ~/.spynnaker.cfg
        echo "use_java = True" >> ~/.spynnaker.cfg
        echo "java_call=/usr/bin/java" >> ~/.spynnaker.cfg
        echo "java_properties=-Dspinnaker.parallel_tasks=10" >> ~/.spynnaker.cfg
        printf "java_spinnaker_path=" >> ~/.spynnaker.cfg
        pwd >> ~/.spynnaker.cfg
        # Write a GFE config file for spalloc and java use
        echo "[Machine]" > ~/.spiNNakerGraphFrontEnd.cfg
        echo "spalloc_server = 10.11.192.11" >> ~/.spiNNakerGraphFrontEnd.cfg
        echo "spalloc_user = Jenkins" >> ~/.spiNNakerGraphFrontEnd.cfg
        echo "enable_advanced_monitor_support = True" >> ~/.spiNNakerGraphFrontEnd.cfg
        echo "[Java]" >> ~/.spiNNakerGraphFrontEnd.cfg
        echo "use_java = True" >> ~/.spiNNakerGraphFrontEnd.cfg
        echo "java_call=/usr/bin/java" >> ~/.spiNNakerGraphFrontEnd.cfg
        echo "java_properties=-Dspinnaker.parallel_tasks=10" >> ~/.spiNNakerGraphFrontEnd.cfg
        printf "java_spinnaker_path=" >> ~/.spiNNakerGraphFrontEnd.cfg
        pwd >> ~/.spiNNakerGraphFrontEnd.cfg
        # Prepare coverage
        rm -f coverage.xml
        rm -f .coverage
        # Prepare for unit tests
        echo "# Empty config" >  ~/.spinnaker.cfg
        
    - name: Run SpiNNUtils Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: SpiNNUtils/unittests
        timeout: 1200
        cov_name: spinnutils
        n_threads: 1
    
    - name: Run SpiNNMachine Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: SpiNNMachine/unittests
        timeout: 1200
        cov_name: spinnmachine
        n_threads: 1
   
    - name: Run SpiNNMan Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: SpiNNMan/unittests
        timeout: 1200
        cov_name: spinnman
        n_threads: 1
    
    - name: Run PACMAN Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: PACMAN/unittests
        timeout: 1200
        cov_name: pacman
        n_threads: 1
    
    - name: Run spalloc Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: spalloc/tests
        timeout: 1200
        cov_name: spalloc
        n_threads: 1
    
    - name: Run DataSpecification Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: DataSpecification/unittests
        timeout: 1200
        cov_name: dataspec
        n_threads: 1
    
    - name: Run SpiNNFrontEndCommon Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: SpiNNFrontEndCommon/unittests
        timeout: 1200
        cov_name: fec
        n_threads: 1
        
    - name: Run sPyNNaker Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: sPyNNaker/unittests
        timeout: 1200
        cov_name: spynnaker
        n_threads: 1
    
    - name: Run sPyNNaker8 Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: sPyNNaker8/unittests
        timeout: 1200
        cov_name: spynnaker8
        n_threads: 1
        
    - name: Run SpiNNakerGraphFrontEnd Unit Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: SpiNNakerGraphFrontEnd/unittests
        timeout: 1200
        cov_name: gfe
        n_threads: 1

    - name: Run sPyNNaker Integration Tests
      uses: ./.github/actions/pytest_local
      with:
        tests: sPyNNaker8/p8_integration_tests/quick_test/
        timeout: 1200
        cov_name: sPyNNaker8_Integration
        n_threads: ${{ steps.set_env_step.outputs.n_threads }}
        
    - name: Run sPyNNaker Long Integration Tests
      if: (github.event_name == 'schedule')
      uses: ./.github/actions/pytest_local
      with:
        tests: sPyNNaker8/p8_integration_tests/long_test/
        timeout: 12000
        cov_name: sPyNNaker8_Integration_Long
        n_threads: 1
        
    - name: Run GFE Integration Tests
      uses: ./.github/actions/pytest_local
      with:
        tests: SpiNNakerGraphFrontEnd/gfe_integration_tests/
        timeout: 1200
        cov_name: GFE_Integration
        n_threads: ${{ steps.set_env_step.outputs.n_threads }}
   
    - name: Run New Model Template Examples
      uses: ./.github/actions/pytest_local
      with:
        tests: sPyNNaker8/p8_integration_tests/test_new_model_templates
        timeout: 1200
        cov_name: new_model_example
        n_threads: ${{ steps.set_env_step.outputs.n_threads }}
     
    - name: Run New Model Template Integeration Tests
      uses: ./.github/actions/pytest_local
      with:
        tests: sPyNNaker8NewModelTemplate/nmt_integration_tests
        timeout: 1200
        cov_name: nmt_integration_tests
        n_threads: ${{ steps.set_env_step.outputs.n_threads }}
        
    - name: Build Scripts to Run
      run: python sPyNNaker8/p8_integration_tests/scripts_test/build_script.py shorter
    
    - name: Run PyNN8Examples Scripts
      uses: ./.github/actions/pytest_local
      with:
        tests: sPyNNaker8/p8_integration_tests/scripts_test/examples_auto_test.py
        timeout: 1200
        cov_name: p8_examples
        n_threads: ${{ steps.set_env_step.outputs.n_threads }}
    
    - name: Run IntroLabs Scripts
      uses: ./.github/actions/pytest_local
      with:
        tests: sPyNNaker8/p8_integration_tests/scripts_test/intro_labs_auto_test.py
        timeout: 1200
        cov_name: p8_examples
        n_threads: 1
        
    - name: Check Reports
      run: find . -maxdepth 3 -type f -wholename "*/reports/*" -print -exec cat \\{\\}  \\;
    
    - name: Check Destroyed
      run: py.test sPyNNaker8/p8_integration_tests/destroyed_checker_test --forked --instafail --timeout 120
      
    - name: Check Executables Used
      run: python -m spinn_utilities.executable_finder

    - name: Create Coverage HTML
      run: |
        coverage html -d coverage_html
        
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
        
    - name: Deploy Coverage to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@3.7.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages
        folder: coverage_html
        target_folder: ${{ steps.extract_branch.outputs.branch }}
        
    - name: Add coverage to comment
      uses: peter-evans/commit-comment@v1
      with:
        body: |
          Coverage information deployed to https://spinnakermanchester.github.io/IntegrationTests/${{ steps.extract_branch.outputs.branch }}/
