name: "Clone matching"
description: "Clone the branch with a name matching that of the tests being done, or master if that doesn't exist"
inputs:
  repository:
    description: The repository (or repositories on multiple lines) to clone
    required: true
runs:
  using: "composite"
  steps:
    - id: git_clone_matching
      run: |
        SAVEIFS=$IFS   # Save current IFS
        IFS=$'\n'      # Change IFS to new line
        REPOS=(${{ inputs.repository }}) # split to array
        IFS=$SAVEIFS   # Restore IFS
        for (( i=0; i<${#REPOS[@]}; i++))
        do
          REPO=${REPOS[$i]}
          echo "Testing branch of $REPO"
          BRANCH=$(git ls-remote $REPO | awk '
              BEGIN {
                  id = "x"
                  # The next line is a default default only
                  branch = "REMOTE_PARSE_FAILED"
                  target_branch = "refs/heads/" ENVIRON["GITHUB_REF"]
                  target_tag = "refs/tags/" ENVIRON["GITHUB_REF"]
              }
              $2=="HEAD" {
                  # Note that the remote HEAD ref comes first
                  id = $1
              }
              $1==id {
                  sub(/refs\/(heads|tags)\//, "", $2)
                  branch = $2
                  # May be overwritten by the rule below; this is OK
              }
              $2==target_branch || $2==target_tag {
                  branch = ENVIRON["GITHUB_REF"]
                  # Reset the ID to a non-hash so the rule to match it will not fire
                  id = "x"
              }
              END {
                  print branch
              }')
          BRANCH=${BRANCH#refs/heads/}
          git clone --branch $BRANCH --single-branch --depth 1 $REPO
          echo "Checked out branch $BRANCH of $REPO"
        done
      shell: bash
